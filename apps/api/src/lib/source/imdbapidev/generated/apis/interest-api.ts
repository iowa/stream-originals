/* tslint:disable */
/* eslint-disable */
/**
 * IMDbAPI
 * IMDb API for accessing movie and TV show data
 *
 * The version of the OpenAPI document: 2.7.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base.js';
// @ts-ignore
import type { ImdbapiInterest } from '../models.js';
// @ts-ignore
import type { ImdbapiListListInterestCategoriesResponse } from '../models.js';
// @ts-ignore
import type { RpcStatus } from '../models.js';
/**
 * InterestApi - axios parameter creator
 * @export
 */
export const InterestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve details of a specific interest using its ID.
         * @summary Get interest by ID
         * @param {string} interestId Required. The ID of the interest to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceGetInterest: async (interestId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'interestId' is not null or undefined
            assertParamExists('iMDbAPIServiceGetInterest', 'interestId', interestId)
            const localVarPath = `/interests/{interestId}`
                .replace(`{${"interestId"}}`, encodeURIComponent(String(interestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all interest categories available in the IMDb API.
         * @summary List interest categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListInterestCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/interests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InterestApi - functional programming interface
 * @export
 */
export const InterestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InterestApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve details of a specific interest using its ID.
         * @summary Get interest by ID
         * @param {string} interestId Required. The ID of the interest to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceGetInterest(interestId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiInterest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceGetInterest(interestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterestApi.iMDbAPIServiceGetInterest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all interest categories available in the IMDb API.
         * @summary List interest categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListInterestCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListListInterestCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListInterestCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InterestApi.iMDbAPIServiceListInterestCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InterestApi - factory interface
 * @export
 */
export const InterestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InterestApiFp(configuration)
    return {
        /**
         * Retrieve details of a specific interest using its ID.
         * @summary Get interest by ID
         * @param {string} interestId Required. The ID of the interest to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceGetInterest(interestId: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiInterest> {
            return localVarFp.iMDbAPIServiceGetInterest(interestId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all interest categories available in the IMDb API.
         * @summary List interest categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListInterestCategories(options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListListInterestCategoriesResponse> {
            return localVarFp.iMDbAPIServiceListInterestCategories(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InterestApi - object-oriented interface
 * @export
 * @class InterestApi
 * @extends {BaseAPI}
 */
export class InterestApi extends BaseAPI {
    /**
     * Retrieve details of a specific interest using its ID.
     * @summary Get interest by ID
     * @param {string} interestId Required. The ID of the interest to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterestApi
     */
    public iMDbAPIServiceGetInterest(interestId: string, options?: RawAxiosRequestConfig) {
        return InterestApiFp(this.configuration).iMDbAPIServiceGetInterest(interestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all interest categories available in the IMDb API.
     * @summary List interest categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterestApi
     */
    public iMDbAPIServiceListInterestCategories(options?: RawAxiosRequestConfig) {
        return InterestApiFp(this.configuration).iMDbAPIServiceListInterestCategories(options).then((request) => request(this.axios, this.basePath));
    }
}

