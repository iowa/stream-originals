/* tslint:disable */
/* eslint-disable */
/**
 * IMDbAPI
 * IMDb API for accessing movie and TV show data
 *
 * The version of the OpenAPI document: 2.7.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base.js';
// @ts-ignore
import type { ImdbapiBatchGetNamesResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListNameFilmographyResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListNameImagesResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListNameRelationshipsResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListNameTriviaResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListStarMetersResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiName } from '../models.js';
// @ts-ignore
import type { RpcStatus } from '../models.js';
/**
 * NameApi - axios parameter creator
 * @export
 */
export const NameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve details of multiple names using their IMDb IDs.
         * @summary Batch get names by IDs
         * @param {Array<string>} nameIds Required. List of IMDb name IDs in the format \&quot;nm1234567\&quot;. The maximum number of IDs is 5.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceBatchGetNames: async (nameIds: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nameIds' is not null or undefined
            assertParamExists('iMDbAPIServiceBatchGetNames', 'nameIds', nameIds)
            const localVarPath = `/names:batchGet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nameIds) {
                localVarQueryParameter['nameIds'] = nameIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a name\'s details using its IMDb ID.
         * @summary Get name by ID
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceGetName: async (nameId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nameId' is not null or undefined
            assertParamExists('iMDbAPIServiceGetName', 'nameId', nameId)
            const localVarPath = `/names/{nameId}`
                .replace(`{${"nameId"}}`, encodeURIComponent(String(nameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the filmography associated with a specific name.
         * @summary List filmography for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {Array<string>} [categories] Optional. The categories of credits to filter by. If not specified, all categories are returned.
         * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListNameFilmography: async (nameId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nameId' is not null or undefined
            assertParamExists('iMDbAPIServiceListNameFilmography', 'nameId', nameId)
            const localVarPath = `/names/{nameId}/filmography`
                .replace(`{${"nameId"}}`, encodeURIComponent(String(nameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the images associated with a specific name.
         * @summary List images for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {Array<string>} [types] Optional. The types of images to filter by. If not specified, all types are returned.
         * @param {number} [pageSize] Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListNameImages: async (nameId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nameId' is not null or undefined
            assertParamExists('iMDbAPIServiceListNameImages', 'nameId', nameId)
            const localVarPath = `/names/{nameId}/images`
                .replace(`{${"nameId"}}`, encodeURIComponent(String(nameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types) {
                localVarQueryParameter['types'] = types;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the relationships associated with a specific name.
         * @summary List relationships for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListNameRelationships: async (nameId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nameId' is not null or undefined
            assertParamExists('iMDbAPIServiceListNameRelationships', 'nameId', nameId)
            const localVarPath = `/names/{nameId}/relationships`
                .replace(`{${"nameId"}}`, encodeURIComponent(String(nameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the trivia associated with a specific name.
         * @summary List trivia for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {number} [pageSize] Optional. The maximum number of trivia entries to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListNameTrivia: async (nameId: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nameId' is not null or undefined
            assertParamExists('iMDbAPIServiceListNameTrivia', 'nameId', nameId)
            const localVarPath = `/names/{nameId}/trivia`
                .replace(`{${"nameId"}}`, encodeURIComponent(String(nameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the star meter rankings for names.
         * @summary List star meter rankings
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListStarMeters: async (pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chart/starmeter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NameApi - functional programming interface
 * @export
 */
export const NameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NameApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve details of multiple names using their IMDb IDs.
         * @summary Batch get names by IDs
         * @param {Array<string>} nameIds Required. List of IMDb name IDs in the format \&quot;nm1234567\&quot;. The maximum number of IDs is 5.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceBatchGetNames(nameIds: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiBatchGetNamesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceBatchGetNames(nameIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NameApi.iMDbAPIServiceBatchGetNames']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a name\'s details using its IMDb ID.
         * @summary Get name by ID
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceGetName(nameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiName>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceGetName(nameId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NameApi.iMDbAPIServiceGetName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the filmography associated with a specific name.
         * @summary List filmography for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {Array<string>} [categories] Optional. The categories of credits to filter by. If not specified, all categories are returned.
         * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListNameFilmography(nameId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListNameFilmographyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListNameFilmography(nameId, categories, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NameApi.iMDbAPIServiceListNameFilmography']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the images associated with a specific name.
         * @summary List images for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {Array<string>} [types] Optional. The types of images to filter by. If not specified, all types are returned.
         * @param {number} [pageSize] Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListNameImages(nameId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListNameImagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListNameImages(nameId, types, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NameApi.iMDbAPIServiceListNameImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the relationships associated with a specific name.
         * @summary List relationships for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListNameRelationships(nameId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListNameRelationshipsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListNameRelationships(nameId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NameApi.iMDbAPIServiceListNameRelationships']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the trivia associated with a specific name.
         * @summary List trivia for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {number} [pageSize] Optional. The maximum number of trivia entries to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListNameTrivia(nameId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListNameTriviaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListNameTrivia(nameId, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NameApi.iMDbAPIServiceListNameTrivia']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the star meter rankings for names.
         * @summary List star meter rankings
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListStarMeters(pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListStarMetersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListStarMeters(pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NameApi.iMDbAPIServiceListStarMeters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NameApi - factory interface
 * @export
 */
export const NameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NameApiFp(configuration)
    return {
        /**
         * Retrieve details of multiple names using their IMDb IDs.
         * @summary Batch get names by IDs
         * @param {Array<string>} nameIds Required. List of IMDb name IDs in the format \&quot;nm1234567\&quot;. The maximum number of IDs is 5.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceBatchGetNames(nameIds: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiBatchGetNamesResponse> {
            return localVarFp.iMDbAPIServiceBatchGetNames(nameIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a name\'s details using its IMDb ID.
         * @summary Get name by ID
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceGetName(nameId: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiName> {
            return localVarFp.iMDbAPIServiceGetName(nameId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the filmography associated with a specific name.
         * @summary List filmography for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {Array<string>} [categories] Optional. The categories of credits to filter by. If not specified, all categories are returned.
         * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListNameFilmography(nameId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListNameFilmographyResponse> {
            return localVarFp.iMDbAPIServiceListNameFilmography(nameId, categories, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the images associated with a specific name.
         * @summary List images for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {Array<string>} [types] Optional. The types of images to filter by. If not specified, all types are returned.
         * @param {number} [pageSize] Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListNameImages(nameId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListNameImagesResponse> {
            return localVarFp.iMDbAPIServiceListNameImages(nameId, types, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the relationships associated with a specific name.
         * @summary List relationships for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListNameRelationships(nameId: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListNameRelationshipsResponse> {
            return localVarFp.iMDbAPIServiceListNameRelationships(nameId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the trivia associated with a specific name.
         * @summary List trivia for a name
         * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
         * @param {number} [pageSize] Optional. The maximum number of trivia entries to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListNameTrivia(nameId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListNameTriviaResponse> {
            return localVarFp.iMDbAPIServiceListNameTrivia(nameId, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the star meter rankings for names.
         * @summary List star meter rankings
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListStarMeters(pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListStarMetersResponse> {
            return localVarFp.iMDbAPIServiceListStarMeters(pageToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NameApi - object-oriented interface
 * @export
 * @class NameApi
 * @extends {BaseAPI}
 */
export class NameApi extends BaseAPI {
    /**
     * Retrieve details of multiple names using their IMDb IDs.
     * @summary Batch get names by IDs
     * @param {Array<string>} nameIds Required. List of IMDb name IDs in the format \&quot;nm1234567\&quot;. The maximum number of IDs is 5.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameApi
     */
    public iMDbAPIServiceBatchGetNames(nameIds: Array<string>, options?: RawAxiosRequestConfig) {
        return NameApiFp(this.configuration).iMDbAPIServiceBatchGetNames(nameIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a name\'s details using its IMDb ID.
     * @summary Get name by ID
     * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameApi
     */
    public iMDbAPIServiceGetName(nameId: string, options?: RawAxiosRequestConfig) {
        return NameApiFp(this.configuration).iMDbAPIServiceGetName(nameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the filmography associated with a specific name.
     * @summary List filmography for a name
     * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
     * @param {Array<string>} [categories] Optional. The categories of credits to filter by. If not specified, all categories are returned.
     * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameApi
     */
    public iMDbAPIServiceListNameFilmography(nameId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return NameApiFp(this.configuration).iMDbAPIServiceListNameFilmography(nameId, categories, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the images associated with a specific name.
     * @summary List images for a name
     * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
     * @param {Array<string>} [types] Optional. The types of images to filter by. If not specified, all types are returned.
     * @param {number} [pageSize] Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameApi
     */
    public iMDbAPIServiceListNameImages(nameId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return NameApiFp(this.configuration).iMDbAPIServiceListNameImages(nameId, types, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the relationships associated with a specific name.
     * @summary List relationships for a name
     * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameApi
     */
    public iMDbAPIServiceListNameRelationships(nameId: string, options?: RawAxiosRequestConfig) {
        return NameApiFp(this.configuration).iMDbAPIServiceListNameRelationships(nameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the trivia associated with a specific name.
     * @summary List trivia for a name
     * @param {string} nameId Required. IMDB name ID in the format \&quot;nm1234567\&quot;.
     * @param {number} [pageSize] Optional. The maximum number of trivia entries to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameApi
     */
    public iMDbAPIServiceListNameTrivia(nameId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return NameApiFp(this.configuration).iMDbAPIServiceListNameTrivia(nameId, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the star meter rankings for names.
     * @summary List star meter rankings
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NameApi
     */
    public iMDbAPIServiceListStarMeters(pageToken?: string, options?: RawAxiosRequestConfig) {
        return NameApiFp(this.configuration).iMDbAPIServiceListStarMeters(pageToken, options).then((request) => request(this.axios, this.basePath));
    }
}

