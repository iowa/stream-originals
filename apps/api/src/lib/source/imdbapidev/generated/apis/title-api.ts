/* tslint:disable */
/* eslint-disable */
/**
 * IMDbAPI
 * IMDb API for accessing movie and TV show data
 *
 * The version of the OpenAPI document: 2.7.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base.js';
// @ts-ignore
import type { ImdbapiBatchGetTitlesResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiBoxOffice } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleAKAsResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleAwardNominationsResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleCertificatesResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleCompanyCreditsResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleCreditsResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleEpisodesResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleImagesResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleParentsGuideResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleReleaseDatesResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleSeasonsResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitleVideosResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiListTitlesResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiSearchTitlesResponse } from '../models.js';
// @ts-ignore
import type { ImdbapiTitle } from '../models.js';
// @ts-ignore
import type { RpcStatus } from '../models.js';
/**
 * TitleApi - axios parameter creator
 * @export
 */
export const TitleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve details of multiple titles using their IMDb IDs.
         * @summary Batch get titles by IDs
         * @param {Array<string>} titleIds List of IMDb title IDs. Maximum 5 IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceBatchGetTitles: async (titleIds: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleIds' is not null or undefined
            assertParamExists('iMDbAPIServiceBatchGetTitles', 'titleIds', titleIds)
            const localVarPath = `/titles:batchGet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (titleIds) {
                localVarQueryParameter['titleIds'] = titleIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a title\'s details using its IMDb ID.
         * @summary Get title by ID
         * @param {string} titleId The IMDb title ID in the format \&#39;tt1234567\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceGetTitle: async (titleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceGetTitle', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the box office information associated with a specific title.
         * @summary Get box office information for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceGetTitleBoxOffice: async (titleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceGetTitleBoxOffice', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/boxOffice`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the alternative titles (AKAs) associated with a specific title.
         * @summary List AKAs for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleAKAs: async (titleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleAKAs', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/akas`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the award nominations associated with a specific title.
         * @summary List award nominations for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {number} [pageSize] Optional. The maximum number of award nominations to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleAwardNominations: async (titleId: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleAwardNominations', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/awardNominations`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the certificates associated with a specific title.
         * @summary List certificates for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleCertificates: async (titleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleCertificates', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/certificates`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the company credits associated with a specific title.
         * @summary List company credits for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [categories] Optional. The categories of company credits to filter by.
         * @param {number} [pageSize] Optional. The maximum number of company credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleCompanyCredits: async (titleId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleCompanyCredits', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/companyCredits`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the credits associated with a specific title.
         * @summary List credits for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [categories] Optional. The categories of credits to filter by.
         * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleCredits: async (titleId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleCredits', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/credits`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the episodes associated with a specific title.
         * @summary List episodes for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {string} [season] Optional. The season number to filter episodes by.
         * @param {number} [pageSize] Optional. The maximum number of episodes to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleEpisodes: async (titleId: string, season?: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleEpisodes', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/episodes`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (season !== undefined) {
                localVarQueryParameter['season'] = season;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the images associated with a specific title.
         * @summary List images for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [types] Optional. The types of images to filter by. If not specified, all types are returned.
         * @param {number} [pageSize] Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleImages: async (titleId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleImages', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/images`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types) {
                localVarQueryParameter['types'] = types;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the parents guide associated with a specific title.
         * @summary List parents guide for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleParentsGuide: async (titleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleParentsGuide', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/parentsGuide`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the release dates associated with a specific title.
         * @summary List release dates for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleReleaseDates: async (titleId: string, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleReleaseDates', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/releaseDates`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the seasons associated with a specific title.
         * @summary List seasons for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleSeasons: async (titleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleSeasons', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/seasons`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the videos associated with a specific title.
         * @summary List videos for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [types] Optional. The types of videos to filter by. If not specified, all types are returned.
         * @param {number} [pageSize] Optional. The maximum number of videos to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleVideos: async (titleId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'titleId' is not null or undefined
            assertParamExists('iMDbAPIServiceListTitleVideos', 'titleId', titleId)
            const localVarPath = `/titles/{titleId}/videos`
                .replace(`{${"titleId"}}`, encodeURIComponent(String(titleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types) {
                localVarQueryParameter['types'] = types;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of titles with optional filters.
         * @summary List titles
         * @param {Array<IMDbAPIServiceListTitlesTypesEnum>} [types] Optional. The type of titles to filter by. If not specified, all types are returned.   - MOVIE: Represents a movie title.  - TV_SERIES: Represents a TV series title.  - TV_MINI_SERIES: Represents a TV mini-series title.  - TV_SPECIAL: Represents a TV special title.  - TV_MOVIE: Represents a TV movie title.  - SHORT: Represents a short title.  - VIDEO: Represents a video title.  - VIDEO_GAME: Represents a video game title.
         * @param {Array<string>} [genres] Optional. The genres to filter titles by. If not specified, titles from all genres are returned.
         * @param {Array<string>} [countryCodes] Optional. The ISO 3166-1 alpha-2 country codes to filter titles by. If not specified, titles from all countries are returned. Example: \&quot;US\&quot; for United States, \&quot;GB\&quot; for United Kingdom.
         * @param {Array<string>} [languageCodes] Optional. The ISO 639-1 or ISO 639-2 language codes to filter titles by. If not specified, titles in all languages are returned.
         * @param {Array<string>} [nameIds] Optional. The IDs of names to filter titles by.
         * @param {Array<string>} [interestIds] Optional. The IDs of interests to filter titles by. If not specified, titles associated with all interests are returned.
         * @param {number} [startYear] Optional. The start year for filtering titles.
         * @param {number} [endYear] Optional. The end year for filtering titles.
         * @param {number} [minVoteCount] Optional. The minimum number of votes a title must have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000. Default is 0.
         * @param {number} [maxVoteCount] Optional. The maximum number of votes a title can have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000.
         * @param {number} [minAggregateRating] Optional. The minimum rating a title must have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0.
         * @param {number} [maxAggregateRating] Optional. The maximum rating a title can have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0.
         * @param {IMDbAPIServiceListTitlesSortByEnum} [sortBy] Optional. The sorting order for the titles. If not specified, titles are sorted by popularity.   - SORT_BY_POPULARITY: Sort by popularity. This is used to rank titles based on their popularity, which can be influenced by various factors such as viewership, ratings, and cultural impact.  - SORT_BY_RELEASE_DATE: Sort by release date. This is used to rank titles based on their release dates, with newer titles typically appearing before older ones.  - SORT_BY_USER_RATING: Sort by user rating. This is used to rank titles based on the average user rating, which reflects the overall audience reception.  - SORT_BY_USER_RATING_COUNT: Sort by user rating count. This is used to rank titles based on the number of user ratings they have received, which can indicate the level of engagement or popularity among viewers.  - SORT_BY_YEAR: Sort by year. This is used to rank titles based on their release year, with newer titles typically appearing before older ones.
         * @param {IMDbAPIServiceListTitlesSortOrderEnum} [sortOrder] Optional. The sorting order for the titles. If not specified, titles are sorted in ascending order.   - ASC: Sort in ascending order.  - DESC: Sort in descending order.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitles: async (types?: Array<IMDbAPIServiceListTitlesTypesEnum>, genres?: Array<string>, countryCodes?: Array<string>, languageCodes?: Array<string>, nameIds?: Array<string>, interestIds?: Array<string>, startYear?: number, endYear?: number, minVoteCount?: number, maxVoteCount?: number, minAggregateRating?: number, maxAggregateRating?: number, sortBy?: IMDbAPIServiceListTitlesSortByEnum, sortOrder?: IMDbAPIServiceListTitlesSortOrderEnum, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/titles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types) {
                localVarQueryParameter['types'] = types;
            }

            if (genres) {
                localVarQueryParameter['genres'] = genres;
            }

            if (countryCodes) {
                localVarQueryParameter['countryCodes'] = countryCodes;
            }

            if (languageCodes) {
                localVarQueryParameter['languageCodes'] = languageCodes;
            }

            if (nameIds) {
                localVarQueryParameter['nameIds'] = nameIds;
            }

            if (interestIds) {
                localVarQueryParameter['interestIds'] = interestIds;
            }

            if (startYear !== undefined) {
                localVarQueryParameter['startYear'] = startYear;
            }

            if (endYear !== undefined) {
                localVarQueryParameter['endYear'] = endYear;
            }

            if (minVoteCount !== undefined) {
                localVarQueryParameter['minVoteCount'] = minVoteCount;
            }

            if (maxVoteCount !== undefined) {
                localVarQueryParameter['maxVoteCount'] = maxVoteCount;
            }

            if (minAggregateRating !== undefined) {
                localVarQueryParameter['minAggregateRating'] = minAggregateRating;
            }

            if (maxAggregateRating !== undefined) {
                localVarQueryParameter['maxAggregateRating'] = maxAggregateRating;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for titles using a query string.
         * @summary Search titles by query
         * @param {string} query Required. The search query for titles.
         * @param {number} [limit] Optional. Limit the number of results returned. Maximum is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceSearchTitles: async (query: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('iMDbAPIServiceSearchTitles', 'query', query)
            const localVarPath = `/search/titles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TitleApi - functional programming interface
 * @export
 */
export const TitleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TitleApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve details of multiple titles using their IMDb IDs.
         * @summary Batch get titles by IDs
         * @param {Array<string>} titleIds List of IMDb title IDs. Maximum 5 IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceBatchGetTitles(titleIds: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiBatchGetTitlesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceBatchGetTitles(titleIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceBatchGetTitles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a title\'s details using its IMDb ID.
         * @summary Get title by ID
         * @param {string} titleId The IMDb title ID in the format \&#39;tt1234567\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceGetTitle(titleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiTitle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceGetTitle(titleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceGetTitle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the box office information associated with a specific title.
         * @summary Get box office information for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceGetTitleBoxOffice(titleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiBoxOffice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceGetTitleBoxOffice(titleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceGetTitleBoxOffice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the alternative titles (AKAs) associated with a specific title.
         * @summary List AKAs for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleAKAs(titleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleAKAsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleAKAs(titleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleAKAs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the award nominations associated with a specific title.
         * @summary List award nominations for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {number} [pageSize] Optional. The maximum number of award nominations to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleAwardNominations(titleId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleAwardNominationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleAwardNominations(titleId, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleAwardNominations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the certificates associated with a specific title.
         * @summary List certificates for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleCertificates(titleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleCertificatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleCertificates(titleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleCertificates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the company credits associated with a specific title.
         * @summary List company credits for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [categories] Optional. The categories of company credits to filter by.
         * @param {number} [pageSize] Optional. The maximum number of company credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleCompanyCredits(titleId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleCompanyCreditsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleCompanyCredits(titleId, categories, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleCompanyCredits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the credits associated with a specific title.
         * @summary List credits for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [categories] Optional. The categories of credits to filter by.
         * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleCredits(titleId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleCreditsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleCredits(titleId, categories, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleCredits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the episodes associated with a specific title.
         * @summary List episodes for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {string} [season] Optional. The season number to filter episodes by.
         * @param {number} [pageSize] Optional. The maximum number of episodes to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleEpisodes(titleId: string, season?: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleEpisodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleEpisodes(titleId, season, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleEpisodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the images associated with a specific title.
         * @summary List images for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [types] Optional. The types of images to filter by. If not specified, all types are returned.
         * @param {number} [pageSize] Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleImages(titleId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleImagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleImages(titleId, types, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the parents guide associated with a specific title.
         * @summary List parents guide for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleParentsGuide(titleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleParentsGuideResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleParentsGuide(titleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleParentsGuide']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the release dates associated with a specific title.
         * @summary List release dates for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleReleaseDates(titleId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleReleaseDatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleReleaseDates(titleId, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleReleaseDates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the seasons associated with a specific title.
         * @summary List seasons for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleSeasons(titleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleSeasonsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleSeasons(titleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleSeasons']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the videos associated with a specific title.
         * @summary List videos for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [types] Optional. The types of videos to filter by. If not specified, all types are returned.
         * @param {number} [pageSize] Optional. The maximum number of videos to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitleVideos(titleId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitleVideosResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitleVideos(titleId, types, pageSize, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitleVideos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of titles with optional filters.
         * @summary List titles
         * @param {Array<IMDbAPIServiceListTitlesTypesEnum>} [types] Optional. The type of titles to filter by. If not specified, all types are returned.   - MOVIE: Represents a movie title.  - TV_SERIES: Represents a TV series title.  - TV_MINI_SERIES: Represents a TV mini-series title.  - TV_SPECIAL: Represents a TV special title.  - TV_MOVIE: Represents a TV movie title.  - SHORT: Represents a short title.  - VIDEO: Represents a video title.  - VIDEO_GAME: Represents a video game title.
         * @param {Array<string>} [genres] Optional. The genres to filter titles by. If not specified, titles from all genres are returned.
         * @param {Array<string>} [countryCodes] Optional. The ISO 3166-1 alpha-2 country codes to filter titles by. If not specified, titles from all countries are returned. Example: \&quot;US\&quot; for United States, \&quot;GB\&quot; for United Kingdom.
         * @param {Array<string>} [languageCodes] Optional. The ISO 639-1 or ISO 639-2 language codes to filter titles by. If not specified, titles in all languages are returned.
         * @param {Array<string>} [nameIds] Optional. The IDs of names to filter titles by.
         * @param {Array<string>} [interestIds] Optional. The IDs of interests to filter titles by. If not specified, titles associated with all interests are returned.
         * @param {number} [startYear] Optional. The start year for filtering titles.
         * @param {number} [endYear] Optional. The end year for filtering titles.
         * @param {number} [minVoteCount] Optional. The minimum number of votes a title must have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000. Default is 0.
         * @param {number} [maxVoteCount] Optional. The maximum number of votes a title can have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000.
         * @param {number} [minAggregateRating] Optional. The minimum rating a title must have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0.
         * @param {number} [maxAggregateRating] Optional. The maximum rating a title can have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0.
         * @param {IMDbAPIServiceListTitlesSortByEnum} [sortBy] Optional. The sorting order for the titles. If not specified, titles are sorted by popularity.   - SORT_BY_POPULARITY: Sort by popularity. This is used to rank titles based on their popularity, which can be influenced by various factors such as viewership, ratings, and cultural impact.  - SORT_BY_RELEASE_DATE: Sort by release date. This is used to rank titles based on their release dates, with newer titles typically appearing before older ones.  - SORT_BY_USER_RATING: Sort by user rating. This is used to rank titles based on the average user rating, which reflects the overall audience reception.  - SORT_BY_USER_RATING_COUNT: Sort by user rating count. This is used to rank titles based on the number of user ratings they have received, which can indicate the level of engagement or popularity among viewers.  - SORT_BY_YEAR: Sort by year. This is used to rank titles based on their release year, with newer titles typically appearing before older ones.
         * @param {IMDbAPIServiceListTitlesSortOrderEnum} [sortOrder] Optional. The sorting order for the titles. If not specified, titles are sorted in ascending order.   - ASC: Sort in ascending order.  - DESC: Sort in descending order.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceListTitles(types?: Array<IMDbAPIServiceListTitlesTypesEnum>, genres?: Array<string>, countryCodes?: Array<string>, languageCodes?: Array<string>, nameIds?: Array<string>, interestIds?: Array<string>, startYear?: number, endYear?: number, minVoteCount?: number, maxVoteCount?: number, minAggregateRating?: number, maxAggregateRating?: number, sortBy?: IMDbAPIServiceListTitlesSortByEnum, sortOrder?: IMDbAPIServiceListTitlesSortOrderEnum, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiListTitlesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceListTitles(types, genres, countryCodes, languageCodes, nameIds, interestIds, startYear, endYear, minVoteCount, maxVoteCount, minAggregateRating, maxAggregateRating, sortBy, sortOrder, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceListTitles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for titles using a query string.
         * @summary Search titles by query
         * @param {string} query Required. The search query for titles.
         * @param {number} [limit] Optional. Limit the number of results returned. Maximum is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iMDbAPIServiceSearchTitles(query: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImdbapiSearchTitlesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iMDbAPIServiceSearchTitles(query, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TitleApi.iMDbAPIServiceSearchTitles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TitleApi - factory interface
 * @export
 */
export const TitleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TitleApiFp(configuration)
    return {
        /**
         * Retrieve details of multiple titles using their IMDb IDs.
         * @summary Batch get titles by IDs
         * @param {Array<string>} titleIds List of IMDb title IDs. Maximum 5 IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceBatchGetTitles(titleIds: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiBatchGetTitlesResponse> {
            return localVarFp.iMDbAPIServiceBatchGetTitles(titleIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a title\'s details using its IMDb ID.
         * @summary Get title by ID
         * @param {string} titleId The IMDb title ID in the format \&#39;tt1234567\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceGetTitle(titleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiTitle> {
            return localVarFp.iMDbAPIServiceGetTitle(titleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the box office information associated with a specific title.
         * @summary Get box office information for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceGetTitleBoxOffice(titleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiBoxOffice> {
            return localVarFp.iMDbAPIServiceGetTitleBoxOffice(titleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the alternative titles (AKAs) associated with a specific title.
         * @summary List AKAs for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleAKAs(titleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleAKAsResponse> {
            return localVarFp.iMDbAPIServiceListTitleAKAs(titleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the award nominations associated with a specific title.
         * @summary List award nominations for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {number} [pageSize] Optional. The maximum number of award nominations to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleAwardNominations(titleId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleAwardNominationsResponse> {
            return localVarFp.iMDbAPIServiceListTitleAwardNominations(titleId, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the certificates associated with a specific title.
         * @summary List certificates for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleCertificates(titleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleCertificatesResponse> {
            return localVarFp.iMDbAPIServiceListTitleCertificates(titleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the company credits associated with a specific title.
         * @summary List company credits for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [categories] Optional. The categories of company credits to filter by.
         * @param {number} [pageSize] Optional. The maximum number of company credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleCompanyCredits(titleId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleCompanyCreditsResponse> {
            return localVarFp.iMDbAPIServiceListTitleCompanyCredits(titleId, categories, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the credits associated with a specific title.
         * @summary List credits for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [categories] Optional. The categories of credits to filter by.
         * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleCredits(titleId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleCreditsResponse> {
            return localVarFp.iMDbAPIServiceListTitleCredits(titleId, categories, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the episodes associated with a specific title.
         * @summary List episodes for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {string} [season] Optional. The season number to filter episodes by.
         * @param {number} [pageSize] Optional. The maximum number of episodes to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleEpisodes(titleId: string, season?: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleEpisodesResponse> {
            return localVarFp.iMDbAPIServiceListTitleEpisodes(titleId, season, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the images associated with a specific title.
         * @summary List images for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [types] Optional. The types of images to filter by. If not specified, all types are returned.
         * @param {number} [pageSize] Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleImages(titleId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleImagesResponse> {
            return localVarFp.iMDbAPIServiceListTitleImages(titleId, types, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the parents guide associated with a specific title.
         * @summary List parents guide for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleParentsGuide(titleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleParentsGuideResponse> {
            return localVarFp.iMDbAPIServiceListTitleParentsGuide(titleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the release dates associated with a specific title.
         * @summary List release dates for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleReleaseDates(titleId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleReleaseDatesResponse> {
            return localVarFp.iMDbAPIServiceListTitleReleaseDates(titleId, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the seasons associated with a specific title.
         * @summary List seasons for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleSeasons(titleId: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleSeasonsResponse> {
            return localVarFp.iMDbAPIServiceListTitleSeasons(titleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the videos associated with a specific title.
         * @summary List videos for a title
         * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
         * @param {Array<string>} [types] Optional. The types of videos to filter by. If not specified, all types are returned.
         * @param {number} [pageSize] Optional. The maximum number of videos to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitleVideos(titleId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitleVideosResponse> {
            return localVarFp.iMDbAPIServiceListTitleVideos(titleId, types, pageSize, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of titles with optional filters.
         * @summary List titles
         * @param {Array<IMDbAPIServiceListTitlesTypesEnum>} [types] Optional. The type of titles to filter by. If not specified, all types are returned.   - MOVIE: Represents a movie title.  - TV_SERIES: Represents a TV series title.  - TV_MINI_SERIES: Represents a TV mini-series title.  - TV_SPECIAL: Represents a TV special title.  - TV_MOVIE: Represents a TV movie title.  - SHORT: Represents a short title.  - VIDEO: Represents a video title.  - VIDEO_GAME: Represents a video game title.
         * @param {Array<string>} [genres] Optional. The genres to filter titles by. If not specified, titles from all genres are returned.
         * @param {Array<string>} [countryCodes] Optional. The ISO 3166-1 alpha-2 country codes to filter titles by. If not specified, titles from all countries are returned. Example: \&quot;US\&quot; for United States, \&quot;GB\&quot; for United Kingdom.
         * @param {Array<string>} [languageCodes] Optional. The ISO 639-1 or ISO 639-2 language codes to filter titles by. If not specified, titles in all languages are returned.
         * @param {Array<string>} [nameIds] Optional. The IDs of names to filter titles by.
         * @param {Array<string>} [interestIds] Optional. The IDs of interests to filter titles by. If not specified, titles associated with all interests are returned.
         * @param {number} [startYear] Optional. The start year for filtering titles.
         * @param {number} [endYear] Optional. The end year for filtering titles.
         * @param {number} [minVoteCount] Optional. The minimum number of votes a title must have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000. Default is 0.
         * @param {number} [maxVoteCount] Optional. The maximum number of votes a title can have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000.
         * @param {number} [minAggregateRating] Optional. The minimum rating a title must have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0.
         * @param {number} [maxAggregateRating] Optional. The maximum rating a title can have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0.
         * @param {IMDbAPIServiceListTitlesSortByEnum} [sortBy] Optional. The sorting order for the titles. If not specified, titles are sorted by popularity.   - SORT_BY_POPULARITY: Sort by popularity. This is used to rank titles based on their popularity, which can be influenced by various factors such as viewership, ratings, and cultural impact.  - SORT_BY_RELEASE_DATE: Sort by release date. This is used to rank titles based on their release dates, with newer titles typically appearing before older ones.  - SORT_BY_USER_RATING: Sort by user rating. This is used to rank titles based on the average user rating, which reflects the overall audience reception.  - SORT_BY_USER_RATING_COUNT: Sort by user rating count. This is used to rank titles based on the number of user ratings they have received, which can indicate the level of engagement or popularity among viewers.  - SORT_BY_YEAR: Sort by year. This is used to rank titles based on their release year, with newer titles typically appearing before older ones.
         * @param {IMDbAPIServiceListTitlesSortOrderEnum} [sortOrder] Optional. The sorting order for the titles. If not specified, titles are sorted in ascending order.   - ASC: Sort in ascending order.  - DESC: Sort in descending order.
         * @param {string} [pageToken] Optional. Token for pagination, if applicable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceListTitles(types?: Array<IMDbAPIServiceListTitlesTypesEnum>, genres?: Array<string>, countryCodes?: Array<string>, languageCodes?: Array<string>, nameIds?: Array<string>, interestIds?: Array<string>, startYear?: number, endYear?: number, minVoteCount?: number, maxVoteCount?: number, minAggregateRating?: number, maxAggregateRating?: number, sortBy?: IMDbAPIServiceListTitlesSortByEnum, sortOrder?: IMDbAPIServiceListTitlesSortOrderEnum, pageToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiListTitlesResponse> {
            return localVarFp.iMDbAPIServiceListTitles(types, genres, countryCodes, languageCodes, nameIds, interestIds, startYear, endYear, minVoteCount, maxVoteCount, minAggregateRating, maxAggregateRating, sortBy, sortOrder, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for titles using a query string.
         * @summary Search titles by query
         * @param {string} query Required. The search query for titles.
         * @param {number} [limit] Optional. Limit the number of results returned. Maximum is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iMDbAPIServiceSearchTitles(query: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<ImdbapiSearchTitlesResponse> {
            return localVarFp.iMDbAPIServiceSearchTitles(query, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TitleApi - object-oriented interface
 * @export
 * @class TitleApi
 * @extends {BaseAPI}
 */
export class TitleApi extends BaseAPI {
    /**
     * Retrieve details of multiple titles using their IMDb IDs.
     * @summary Batch get titles by IDs
     * @param {Array<string>} titleIds List of IMDb title IDs. Maximum 5 IDs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceBatchGetTitles(titleIds: Array<string>, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceBatchGetTitles(titleIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a title\'s details using its IMDb ID.
     * @summary Get title by ID
     * @param {string} titleId The IMDb title ID in the format \&#39;tt1234567\&#39;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceGetTitle(titleId: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceGetTitle(titleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the box office information associated with a specific title.
     * @summary Get box office information for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceGetTitleBoxOffice(titleId: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceGetTitleBoxOffice(titleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the alternative titles (AKAs) associated with a specific title.
     * @summary List AKAs for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleAKAs(titleId: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleAKAs(titleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the award nominations associated with a specific title.
     * @summary List award nominations for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {number} [pageSize] Optional. The maximum number of award nominations to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleAwardNominations(titleId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleAwardNominations(titleId, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the certificates associated with a specific title.
     * @summary List certificates for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleCertificates(titleId: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleCertificates(titleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the company credits associated with a specific title.
     * @summary List company credits for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {Array<string>} [categories] Optional. The categories of company credits to filter by.
     * @param {number} [pageSize] Optional. The maximum number of company credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleCompanyCredits(titleId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleCompanyCredits(titleId, categories, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the credits associated with a specific title.
     * @summary List credits for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {Array<string>} [categories] Optional. The categories of credits to filter by.
     * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleCredits(titleId: string, categories?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleCredits(titleId, categories, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the episodes associated with a specific title.
     * @summary List episodes for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {string} [season] Optional. The season number to filter episodes by.
     * @param {number} [pageSize] Optional. The maximum number of episodes to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleEpisodes(titleId: string, season?: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleEpisodes(titleId, season, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the images associated with a specific title.
     * @summary List images for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {Array<string>} [types] Optional. The types of images to filter by. If not specified, all types are returned.
     * @param {number} [pageSize] Optional. The maximum number of images to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleImages(titleId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleImages(titleId, types, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the parents guide associated with a specific title.
     * @summary List parents guide for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleParentsGuide(titleId: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleParentsGuide(titleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the release dates associated with a specific title.
     * @summary List release dates for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {number} [pageSize] Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleReleaseDates(titleId: string, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleReleaseDates(titleId, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the seasons associated with a specific title.
     * @summary List seasons for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleSeasons(titleId: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleSeasons(titleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the videos associated with a specific title.
     * @summary List videos for a title
     * @param {string} titleId Required. IMDb title ID in the format \&quot;tt1234567\&quot;.
     * @param {Array<string>} [types] Optional. The types of videos to filter by. If not specified, all types are returned.
     * @param {number} [pageSize] Optional. The maximum number of videos to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 20.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitleVideos(titleId: string, types?: Array<string>, pageSize?: number, pageToken?: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitleVideos(titleId, types, pageSize, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of titles with optional filters.
     * @summary List titles
     * @param {Array<IMDbAPIServiceListTitlesTypesEnum>} [types] Optional. The type of titles to filter by. If not specified, all types are returned.   - MOVIE: Represents a movie title.  - TV_SERIES: Represents a TV series title.  - TV_MINI_SERIES: Represents a TV mini-series title.  - TV_SPECIAL: Represents a TV special title.  - TV_MOVIE: Represents a TV movie title.  - SHORT: Represents a short title.  - VIDEO: Represents a video title.  - VIDEO_GAME: Represents a video game title.
     * @param {Array<string>} [genres] Optional. The genres to filter titles by. If not specified, titles from all genres are returned.
     * @param {Array<string>} [countryCodes] Optional. The ISO 3166-1 alpha-2 country codes to filter titles by. If not specified, titles from all countries are returned. Example: \&quot;US\&quot; for United States, \&quot;GB\&quot; for United Kingdom.
     * @param {Array<string>} [languageCodes] Optional. The ISO 639-1 or ISO 639-2 language codes to filter titles by. If not specified, titles in all languages are returned.
     * @param {Array<string>} [nameIds] Optional. The IDs of names to filter titles by.
     * @param {Array<string>} [interestIds] Optional. The IDs of interests to filter titles by. If not specified, titles associated with all interests are returned.
     * @param {number} [startYear] Optional. The start year for filtering titles.
     * @param {number} [endYear] Optional. The end year for filtering titles.
     * @param {number} [minVoteCount] Optional. The minimum number of votes a title must have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000. Default is 0.
     * @param {number} [maxVoteCount] Optional. The maximum number of votes a title can have to be included. If not specified, titles with any number of votes are included. The value must be between 0 and 1,000,000,000.
     * @param {number} [minAggregateRating] Optional. The minimum rating a title must have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0.
     * @param {number} [maxAggregateRating] Optional. The maximum rating a title can have to be included. If not specified, titles with any rating are included. The value must be between 0.0 and 10.0.
     * @param {IMDbAPIServiceListTitlesSortByEnum} [sortBy] Optional. The sorting order for the titles. If not specified, titles are sorted by popularity.   - SORT_BY_POPULARITY: Sort by popularity. This is used to rank titles based on their popularity, which can be influenced by various factors such as viewership, ratings, and cultural impact.  - SORT_BY_RELEASE_DATE: Sort by release date. This is used to rank titles based on their release dates, with newer titles typically appearing before older ones.  - SORT_BY_USER_RATING: Sort by user rating. This is used to rank titles based on the average user rating, which reflects the overall audience reception.  - SORT_BY_USER_RATING_COUNT: Sort by user rating count. This is used to rank titles based on the number of user ratings they have received, which can indicate the level of engagement or popularity among viewers.  - SORT_BY_YEAR: Sort by year. This is used to rank titles based on their release year, with newer titles typically appearing before older ones.
     * @param {IMDbAPIServiceListTitlesSortOrderEnum} [sortOrder] Optional. The sorting order for the titles. If not specified, titles are sorted in ascending order.   - ASC: Sort in ascending order.  - DESC: Sort in descending order.
     * @param {string} [pageToken] Optional. Token for pagination, if applicable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceListTitles(types?: Array<IMDbAPIServiceListTitlesTypesEnum>, genres?: Array<string>, countryCodes?: Array<string>, languageCodes?: Array<string>, nameIds?: Array<string>, interestIds?: Array<string>, startYear?: number, endYear?: number, minVoteCount?: number, maxVoteCount?: number, minAggregateRating?: number, maxAggregateRating?: number, sortBy?: IMDbAPIServiceListTitlesSortByEnum, sortOrder?: IMDbAPIServiceListTitlesSortOrderEnum, pageToken?: string, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceListTitles(types, genres, countryCodes, languageCodes, nameIds, interestIds, startYear, endYear, minVoteCount, maxVoteCount, minAggregateRating, maxAggregateRating, sortBy, sortOrder, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for titles using a query string.
     * @summary Search titles by query
     * @param {string} query Required. The search query for titles.
     * @param {number} [limit] Optional. Limit the number of results returned. Maximum is 50.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleApi
     */
    public iMDbAPIServiceSearchTitles(query: string, limit?: number, options?: RawAxiosRequestConfig) {
        return TitleApiFp(this.configuration).iMDbAPIServiceSearchTitles(query, limit, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const IMDbAPIServiceListTitlesTypesEnum = {
    Movie: 'MOVIE',
    TvSeries: 'TV_SERIES',
    TvMiniSeries: 'TV_MINI_SERIES',
    TvSpecial: 'TV_SPECIAL',
    TvMovie: 'TV_MOVIE',
    Short: 'SHORT',
    Video: 'VIDEO',
    VideoGame: 'VIDEO_GAME'
} as const;
export type IMDbAPIServiceListTitlesTypesEnum = typeof IMDbAPIServiceListTitlesTypesEnum[keyof typeof IMDbAPIServiceListTitlesTypesEnum];
/**
 * @export
 */
export const IMDbAPIServiceListTitlesSortByEnum = {
    SortByPopularity: 'SORT_BY_POPULARITY',
    SortByReleaseDate: 'SORT_BY_RELEASE_DATE',
    SortByUserRating: 'SORT_BY_USER_RATING',
    SortByUserRatingCount: 'SORT_BY_USER_RATING_COUNT',
    SortByYear: 'SORT_BY_YEAR'
} as const;
export type IMDbAPIServiceListTitlesSortByEnum = typeof IMDbAPIServiceListTitlesSortByEnum[keyof typeof IMDbAPIServiceListTitlesSortByEnum];
/**
 * @export
 */
export const IMDbAPIServiceListTitlesSortOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type IMDbAPIServiceListTitlesSortOrderEnum = typeof IMDbAPIServiceListTitlesSortOrderEnum[keyof typeof IMDbAPIServiceListTitlesSortOrderEnum];
